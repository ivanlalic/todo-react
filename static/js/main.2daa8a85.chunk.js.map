{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAkEeA,MAhEf,SAAkBC,GAAQ,IAAD,EAECC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAF1C,mBAElBC,EAFkB,KAEXC,EAFW,KAInBC,EAAWC,iBAAO,MAExBC,qBAAW,WACPF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAgBlB,OACI,sBAAMW,UAAU,YAAYC,SAbf,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACfE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGNC,EAAS,KAKL,SACKL,EAAME,KACP,qCACA,uBACIoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLC,SAAUd,EACVG,UAAU,kBACVY,IAAKpB,IAET,wBAAQQ,UAAU,mBAAlB,uBAKA,qCACA,uBACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLC,SAAUd,EACVG,UAAU,aACVY,IAAKpB,IAET,wBAAQQ,UAAU,cAAlB,uB,eCVGa,MA1Cf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EAEjC9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAJ8C,mBAElDD,EAFkD,KAE5C8B,EAF4C,KAezD,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UACI,sBAEIC,QAAS,kBAAMR,EAAaK,EAAKjB,KAFrC,cAGGiB,EAAKb,OAFCa,EAAKjB,IAKd,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACIuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEd,cAAC,IAAD,CACIuB,QAAS,kBAAML,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAKd,MAAO+B,EAAKb,QACnDP,UAAU,mBAdmDqB,OC2ClEG,MA/Df,WAAqB,IAAD,EAEUrC,mBAAS,IAFnB,mBAET2B,EAFS,KAEFW,EAFE,KA4ChB,OACI,gCACI,gEACA,cAAC,EAAD,CACIxB,SA3CI,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAsCL,cAAC,EAAD,CACIb,MAAOA,EACPC,aAlBS,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAYDZ,WA3BO,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAyBDZ,WAtCO,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAU,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCf7DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACI,cAAC,EAAD,OCDRoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2daa8a85.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\n\nfunction TodoForm(props) {\n\nconst [input, setInput] = useState(props.edit ? props.edit.value : '');\n\nconst inputRef = useRef(null)\n\nuseEffect( () => {\n    inputRef.current.focus()    \n} )\n\nconst handleChange = e => {\n    setInput(e.target.value);\n}\n\n\nconst handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n    id: Math.floor(Math.random() * 1000),\n    text: input\n    });\n\n    setInput('');\n\n}\n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            {props.edit ? (\n            <>\n            <input \n                type=\"text\" \n                placeholder=\"Update your ToDo\" \n                value={input} \n                name=\"text\" \n                onChange={handleChange}\n                className=\"todo-input edit\"\n                ref={inputRef}\n            />\n            <button className=\"todo-button edit\">Update</button>\n            </>\n            ) \n            :\n            (\n            <>\n            <input \n                type=\"text\" \n                placeholder=\"Add a todo\" \n                value={input} \n                name=\"text\" \n                onChange={handleChange}\n                className=\"todo-input\"\n                ref={inputRef}\n            />\n            <button className=\"todo-button\">Add</button>\n            </>\n            )}\n\n            \n        </form>\n    )\n}\n\nexport default TodoForm\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport { RiCloseCircleLine } from 'react-icons/ri'\nimport { TiEdit } from 'react-icons/ti'\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if(edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"} key={index}>\n            <div \n                key={todo.id} \n                onClick={() => completeTodo(todo.id)}\n            > {todo.text}\n            </div>\n\n            <div className=\"icons\">\n                <RiCloseCircleLine \n                    onClick={() => removeTodo(todo.id)}\n                    className=\"delete-icon\"\n                />\n                <TiEdit \n                    onClick={() => setEdit({ id: todo.id , value: todo.text })}\n                    className=\"edit-icon\"\n                />\n            </div>\n\n        </div>\n    ))\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport Todo from './Todo';\nimport TodoForm from './TodoForm'\n\n\nfunction TodoList() {\n\n    const [todos, setTodos] = useState([]);\n\n    //Function to add a todo\n    const addTodo = todo => {\n        if(!todo.text || /^\\s+$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n\n        setTodos(newTodos);\n    }\n\n    //Function to update a todo\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s+$/.test(newValue.text)) {\n            return;\n        }\n\n        setTodos( prev => prev.map(item => (item.id === todoId ? newValue : item)))\n\n    }\n\n    //Function to remove a todo\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n\n        setTodos(removeArr);\n\n    }\n\n    //Function to complete a todo\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updatedTodos);\n    }\n\n    return (\n        <div>\n            <h1>What are your plans for today?</h1>\n            <TodoForm \n                onSubmit={addTodo}\n            />\n            <Todo \n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n            />\n            \n        </div>\n\n\n    )\n}\n\nexport default TodoList\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}